###############################################################################
# Highly divisible triangular number
#
# https://projecteuler.net/problem=12
#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
################################################################################

import logging
from src.helpers.natural_number import NaturalNumber

LOGGER = logging.getLogger(__name__)


def problem0012(_top: int) -> int:
    amount_of_divisors = 0
    triangular = 0
    i = 1

    while amount_of_divisors < _top:
        triangular += i
        number = NaturalNumber(triangular)

        list_of_divisors = number.divisors()
        amount_of_divisors = len(list_of_divisors)

        LOGGER.debug("Triangular number: %i has %i divisors",
                     triangular, amount_of_divisors)

        i += 1

    LOGGER.info('Problem 0012 result: %i', triangular)
    return triangular
