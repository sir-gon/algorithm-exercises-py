###############################################################################
# Highly divisible triangular number
#
# https://projecteuler.net/problem=12
#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
################################################################################

import unittest
from .problem0012 import problem0012

class TestProblem0012(unittest.TestCase):

    def test_problem0012_basic(self):

        tests = [
          {'input': 5, 'answer': 28}
        ]

        for _, _tt in enumerate(tests):

            self.assertEqual( problem0012(_tt['input']), _tt['answer'],
              f"{_} | problem0012({_tt['input']}) must be "\
              f"=> {_tt['answer']}")
